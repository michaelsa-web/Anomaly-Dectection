# -*- coding: utf-8 -*-
"""Anomaly Dectection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/176_b1vmysgiLIJcZL4-Fe1-08tBpmkox
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.svm import OneClassSVM
from sklearn.ensemble import IsolationForest
from sklearn.decomposition import PCA

# Load anonymised dataset
url = 'https://raw.githubusercontent.com/main/engine.csv'
data = pd.read_csv(url)

# Rename columns for generalization
data.columns = ['RPM', 'OilPressure', 'FuelPressure', 'CoolantPressure', 'OilTemp', 'CoolantTemp']

# Basic info
print("Data shape:", data.shape)
print(data.info())

# Check for missing and duplicate values
print("Missing values:\n", data.isnull().sum())
print("Duplicate rows:", data.duplicated().sum())

# Descriptive statistics
stats = data.describe(percentiles=[.05, .25, .50, .75, .95])
print(stats)

# Outlier detection using IQR
def detect_iqr_outliers(column):
    Q1 = column.quantile(0.25)
    Q3 = column.quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    return ((column < lower) | (column > upper)).astype(int)

for col in data.columns:
    data[f'{col}_outlier'] = detect_iqr_outliers(data[col])

# Flag rows with at least 2 outlier features
data['IQR_flagged'] = (data[[col for col in data.columns if 'outlier' in col]].sum(axis=1) >= 2).astype(int)
print("Outlier percentage using IQR:", data['IQR_flagged'].mean() * 100)

# Feature Scaling
scaler = MinMaxScaler()
scaled_features = scaler.fit_transform(data[['RPM', 'OilPressure', 'FuelPressure', 'CoolantPressure', 'OilTemp', 'CoolantTemp']])

# Standardized version for ML models
X_scaled = StandardScaler().fit_transform(scaled_features)

# One-Class SVM
ocsvm = OneClassSVM(kernel='rbf', gamma=0.5, nu=0.05)
ocsvm.fit(X_scaled)
data['OCSVM_anomaly'] = ocsvm.predict(X_scaled)
print("One-Class SVM anomalies:", (data['OCSVM_anomaly'] == -1).sum())

# Isolation Forest
iso = IsolationForest(contamination=0.05, random_state=42)
data['IF_anomaly'] = iso.fit_predict(X_scaled)
print("Isolation Forest anomalies:", (data['IF_anomaly'] == -1).sum())

# PCA for 2D visualisation
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
data['PCA1'] = X_pca[:, 0]
data['PCA2'] = X_pca[:, 1]

# Visualise Isolation Forest Results
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='PCA1', y='PCA2', hue='IF_anomaly', palette={1: 'blue', -1: 'red'}, alpha=0.6)
plt.title('Anomaly Detection via Isolation Forest (PCA Projection)')
plt.show()

# Visualise One-Class SVM Results
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='PCA1', y='PCA2', hue='OCSVM_anomaly', palette={1: 'green', -1: 'orange'}, alpha=0.6)
plt.title('Anomaly Detection via One-Class SVM (PCA Projection)')
plt.show()

# Save results (optional)
# data.to_csv('anomaly_results.csv', index=False)

# NOTE: No proprietary or client-specific identifiers or dataset contents included.
#       This anonymised version can be safely used on GitHub for demonstration purposes.